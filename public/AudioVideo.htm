<html>
    <head>
        <title>
            Audio &amp; Video
        </title>
    </head>
    <body>
        <h2>Video</h2>
        <p> 320x240px.
            DAC: RGB 444 ( period correct for CGA sort of )
            8x8 tiles with 1 or 2 colors.
            Smooth scroll 0..7px ( push; delay buffer ). Rough scroll ( pull; memory start address, pitch, wrap bit depth;).
            Rough is bufferd: Atomic write for all by setting smooth 0XXX0YYY reg.
            4 layers aka z-values.
            1 byte/px (1 byte RLE for transparency / Color Keying) sprite overlay with these
            color formats: RGBI 2222 + 3 cycles of 223
            Also possible: combine with background to generate RGB 333.
            16 sprites per scanline. Unlimited height and width due to realtime data loading into 9bit/pixel FIFO
        </p>
        <p>
            Integer zoom is used to create large bosses within the memory bandwidth limit. Fractional zoom using Bresenham is
            used for Hang Out billboards. Also the street is created using zoomed horizontal spans. With the camera fixed on the track, texture is mostly aligned to the scanlines, but does not need to be rigidly.
            The X-positions of texture V ordinate crossings can be calculated on the CPU and with all sprites zoom-able, like 4 crossings are realistic. So the street need not be pinned,
            but true 3d calculation can be used.  
        </p>
        <p>
            In this kind of game all sprites overlap on a scanline. 16 sprites suffices already for hangout, but not out run.
            Anyway, the simple byte buffer format allows the CPU to software render the far away spot into a frame buffer. Scenery in these old games clung to the street.
        </p>
        <p>
            
        Euclidean algorithm with rounding to nearest should result in the delta pattern
        which is most prevalent. So with each iteration we at least halve the pixels where we need to think.
        Long spans feel like different sprites. So small rotations could be better be done in the CPU.
        On the other hand Bresenham is also used for edges, so these may be calculated in the GPU ( maybe in horizontal retrace? 
        </p>
        <h3> Display BSP, The beam tree </h3>
        <p>
            <a href="https://www.bluesnews.com/abrash/">Abrash</a>
            Sprites conjure the idea that a position is more important than the color. On CRTs sprites can be calculated at quite a high horizontal resolution, but vertical movement
            jumps per scan line. With vintage portable screens with low resolution even horizontal movement wants antialiasing. The only way to achieve this that I can live with is,
            is a BSP tree within each scanline. But this has quite high overdraw cost, so naturally I'd go all 2d display BSP, or at least a reliable front to back rendering.
        </p>
        <p>
            With reliable front to back, I mean that in case of doubt ( no 3d BSP and after backface culling ), triangles which overlap can cheaply be cut at a z-value and also have some synergy with
            perspective correct texture mapping. Final calculation of values from edge positions is quite expensive, but only needs to be done with zero overdraw.
            Also texels are already dissolved, no shader need to be loaded and the workload is steady. Hardware support comes in form of low precision mul and div combined with cheap branching in hyperthreading CPU core. 
        </p>
        <h2>Audio</h2>
        floating point matrix rotation for sine tones. The floating point is implemented
        by only acting every 1,2,4,8 cycle.
        Matrix multiplication is even done less times.
        Overtones drown in noise of 1% noise of PWM + edge shifter (diagonal)
)
    </body>
</html>