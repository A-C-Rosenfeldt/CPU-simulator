<html>
    <head>
        <title>6502 like layout ordered by significiance of bits</title>
		<h2>Visible flow</h2>
		<p>
			The data flows along the bit lines of the SRAM register file. I don't plan a symbol to collect data lines anymore.
			I fully expose a Matrix structure and the viewer can decide on the number of bits for ALU=address and for memory ( sign extend like branch in 6502 and load in SH2 or MIPS).
			On the edge there is the carry look ahead tree or any other structure which pushes data cross the lanes. Information goes to the tree root and back to the leafs. Carry goes around ( copies to both sides).
			For MUL (with single cycle per result bit) a right shift may be needed just before the write-back register.
			The connection to the rest of the computer can extend the sign on read and or (de)serialize words to bytes. Oh I may need the latter to have its own read and write port to the bus
			for absolute jumps. So like the memory controler in Jaguar, for 16 bit immedediates made of low byte and high byte,
			the deserialize circuit needs a 8 bit register. Ah, need big endian. Load the hi byte into register and in the next cycle output it onto the hi byte of the internal data bus.
			Or maybe I have a swap in the instruction register read line .. but branch? Seems like carry look-ahead leads to big endian?
			I really should go over a GP register for this one. So no jump absolute, only jump (reg) [with link].
			This would complicate addressing in the register file. So rather have the xpander in the memory interface with addtional register.
		</p>
		<p>
			Now for the rest of the processor those word lines with routing nodes make more sense.
			So the core can write and read to address and databus. Memory also sits here. The instruction register and and pointer also sit on this bus.
			My 8 bit ISA is a bit short on register, so the stack would be extra and sits here.
			Now how do I push or branch? Branch is easy. Peek the current address. ALU puts the new address on the bus, and InstructionPointer records it. Even JRSISC has a waite state here somewhere.
			Ah, ALU-File parts writes the address and stack stores. This would be a two cycle instruction. Not so nice. So SP sits in the register file at 4 -- beyond the address range in the RISC set.
			The bus sits at 5.
		</p>
		<p> Ben Eater has a strange way to splatter instruction stuff all over the layout. I rather like the Intel or Atari Jaguar apporach with the instruction stream.</p>
		<p>The instruction register and the pointer have the default access to memory, data should live in the register file mostly (kinda Harvard).</p>
		<p>Cross overs are the exception. In a Branch we takte the flags from the ALU and the ALU calculates the new address. Load Store run micro code from ROM, while the register File (data) and the  ALU (addressing modes) has access to RAM.
			Immediate data is needed for branch and add and load. So here the ALU has read access to data, but the instruction pointer keeps the address bus.
			So it is not very exceptionial. I should even allow for multi byte Immediate data load into register. One instruction because I got burned by code size bloat in i386 and 68516.
			So the instruction stuff sits close to the RAM and microcode ROM ( no data constants in my ISA ), and passes stuff through to the ALU-file pair.
			Do they keep a shared buffer? I guess that in a real world I would implement those to tidy up all signals going on and off the chip.
		</p>
		<p>
			I had an idea about the microcode where the number of leading zeros represents the number of micro instructions. Micro instructions contain all those tedious control lines for the ALU.
			and all the multiplexers and hence are longer than normal instructions. The single cylce instructions feed through 2 GP register names.
			I check order of those and finnally derive a 4 bit opcode. Instead of funny random logic or PLA optimizations no one understands I may just stick with a ROM?
			Two cylce instructions include byte load and store. These still use two register names. Somehow I don't see a use for the direction flag anymore. Maybe I used it for the stack?
			mov GP,Instruction Pointer may take 2 cylces. Now I don't know how I can do branch in two cycles? At least when I take the branch, I need 3.
			3 cycle instruction would be load store of two bytes.
			The rest are just a few random instructions where the first microcode contains an extra field where to jump to so that I can compact storage of variable lenght routines?
		</p>
		<p>
			I really got into fixed point math. Signed, floats. Maybe instead of DIV and MUL it really is better to have zero and sign extending single cylce instructions and then let the dev decice on the point?
			This would also keep loops out of microcode. These math functions don't need access to RAM anyway.
		</p>
		<p>I don't like magic numbers and code and no PLA. And I don't need to. Register names are straight forward. Branching in 6502 is flag name and value.
			ADD vs ADC is one NAND. SUB instead of ADD is one ADD. Shifting is a multiplexer. Shift sits at the ALU for MUL and DIV. No barrel-shift.
			A fixed instruction length with opcode, immediate could simplify instructions. Immediate value is sign extended and add to GP-register or instruction pointer as default.
			The same counter is used for zero overhead loops? So no push inside these loops.
			Then some opcodes can use other ALU operations.
			I guess I need inc and dec for push and pop. Push flags is a mix of branch and push register and 8 bits. Push instruction pointer is 16 bit. Looks like I need a loop counter ( b/w flag ) in the opcode.
			MIPS always has an add before memory access in order not to disturb the pipeline. Also the address bus is connected to the write-back register, but not the bus. Zero-Register physically has to sit in the file.
			We can use zero register + carry for push and pop. We can write back the address while the new data is loads.
			Post-Increment needs access to the file. Oh this hurts. I could use 16 bit load and store, or even immediate offset to store multiple values and then one ADD for the SP. So like MIPS. No push, pop.
			So all 16-bit reads and writes add the byte counter to the address. So 16bit reads cannot use immedediates? Ah, no they can. All first add register and immediate and then count up.
			Still, in my design the result of the immediate calculate is only available after the next instruction is read. Branches already know if the jump. So this is always valid.
		</p>
		<p>
			Since every instruction loads the next one based on microcode, then I should decode it immediatly, and just need a decoded output register.
			Often immediates are read going with the flow, but I say that add is one cycle ( even for 8 bit) and so there is one cycle to read the next instruction while basically returning value on address.
			Values come and go to the register file. Is it available at the start of the next instruction? Should I not rather load the instruction then?
			At least it needs to go straight through the file on the write-back line and one source line.
			I don't like. Maybe I just insert wait states for immedediate address load store and for branch.
			Jaguar load takes 3 cycles. Maybe I could just block the next instruction if it uses the data of the current Load.
			On the other hand: for absolute address the CPU should be able to just act as a flip-flip and return value to address in the next cycle.
			RAM gets a new address every cycle. Would be weird if the values comes back after more than 1 cycle latency.
			Async DRAM returns stuff within the same cycle. Only the address out latch and the data input latch make it look like 1 cycle.
			Oh wait. One latch too much. Looks like two cycles delay meant for base+offset. 1 cycle latency needs to put the register on the address bus directly.
			Looks like we don't latch the data address. Rather every other cycle is used by the instruction pointer anyway.
			Word burst for data. Reg-Reg instructions burst the memory pointer.
		</p>
		<h2>2 metal layers</h2>
		<p>. VIAs like on the schematic of Ben Eater as disks. I don't think that 3d bridges are really visible. Vias should be the exception .. so big disks. Think two sided PCB.</p>
		<p>
			I have a bit of a problem with SRAM. Word and bitlines cross a lot.
			Shift registers are purely local and seem to be faster if we have a lot of words ( like the 40 character codes in C64, C16).
			There is still the problem with the clock fan out.
			A way to reduce this, to use a tree of multiplexers.
			Clock and write data comes from the root, goes into the leafs, and returns with read data. So there is probably some latency, which is okay for MUL and sprites.
			Do I need latches or flip flops? I really want this double data rate / half clock thing.
			So I need the Original clock and two non overlaping phases alternating on the cycles.
			Then each instruction would still need to remember on which clock it started. Weird. Kinda like register renaming.
			Does each level in the tree need flip flops? Yes, for the clock. Routing is combinatoric logic.
			So basically I have a counter like in a VICII sprite, not a one bit shifter like in the 6502 CPU for the PLA.
		</p>
		<p>
			I want carry look ahead ( because it is cool). I also would like a multiplexer tree. Trees are cool. Trees minimize crossings and vias.
			Latches win in this case because with them we basically move one multiplexer onto the other side.
			Multiplexers are the reason we usually use flip flops. There is still this crossing timing line as in SRAM, but that is it.
			Also we can detangle this: The high speed timing comes from input or output side in between the latch to latch transfer lines.
			So a flip-flop really is the beginning a shift register. It tells us how to manufacture a short sampling at the input and a sharp edge at the output.
			It seems that in this case the clock lines cross the latch to latch transfer. So there is more latency.
			Latches on a bus don't have this transfer and hence less latency.
			Now I really wonder about the MIPS 5-stage pipeline write back shift register. That are a lot of transfers of 32 bit.
		</p>
			Carry look-ahead adds a tree onto the bus. The tree meets in the center. Just no back and forth. Then it is ideal.
			Problem is more that with 8 bit ( minimal viable prototype ), the best implementation has a hight nibble where we calculate with and without carry.
			Then in the second phase there is just a multiplexer. For 16 bit I have much more crossings and would reduce the number of straight lines. This is all so random!
		<p>
		</p>
		<p>
			Thanks to the zero register we only need 5 bits for register names. Renaming happens as data goes through the ALU.
			Ah, the names then need to flow through the pipeline to tell the Load instruction where to load the value into.
			So we have ring of 5 values for this. A 5 stage shifter to select one of this.
			Ah I see, each stage needs access to its value, while there is only one ALU which wants all accesses. So just large shifters are the easiest way to implement this.
		</p>
		<p>
			I don't see that any tree help me with the bus. Or can you imagine the registers sitting in a 2d tree instead of the cross. Neither Arm nor 6502 has a cross.
			A tree with 8 endpoints would have 3 multiplexer nodes. We decode the address on the fly. CMOS would like it.
			So horizontal comming from the ALU. Then vertical. Then horizontal. Then vertical. Then all the load, store, and hold signals from the back.
			I just feel that this needs much more address decoding transistors and it needs a lot of space at the crossing.
		</p>
		<p>
			So the prototype will have no crossings and only ripple adder and 8 bit. The second ALU for MUL, DIV can be stacked onto this.
			Single write back latch can later be exapnded to register renaming.
			Load store blocks the CPU as on 6502 and Z80. Pipeline may come later. Though I am still not sure if it isn't easier to have two write back lines and three load lines over a write back file.
		</p>
		<h2>All the parts, not only the core, for 8 bit data bus</h2>
		<p>
			Register sit on the Data bus and the address bus. The 16 bit addressbus covers much of one side of the DIP and grows from the lower edege of the die into the sides.
			Data bus goes up and crosses the control logic. This may seem and ugly cut, but control logic fetches its instructions from there. I may go in a slight circle.
			Actually, I don't execute instructions in a pipeline. Only the data flows ins pipelines.
			So there is only one instruction register ( still more than a latch because fetch and decode do run a pipeline as in a lot of 8-bits).
			For a small number of microcode steps, a shift register seems to be simpler than a counter with decoder.
			I cannot help, but think of microcode as something in ROM. Space savings come from dedicated bits in the instruction and instruction formats.
			For example, all branch instructions execute the same microcode. Reg-Reg instructions don't execute, but just have a single translation to the control lines.
			Load store may want to share microcode between the 8 bit and 16 bit versions. 8 bit skips some instructions and basically reroutes the shift register output (and test bit for END).
			Shift register looks quiet. Yeah, lots of clock, but the noise ends there.
			A general count donw register might be fun because it has no problem with ripple and can do barrel shift or even large MUL and DIV.
			Though I feel like I still need the micro-code counter.
		</p>
		<h2>No races: Carry Look ahead  and  write back register </h2>
		<p>
			Both ALU and program pointer seem to need a fast adder (program pointer needs it after a jump even if it can use the ALU for the jump).
			As a design I decide on a 16 bit bus with both of these adders on its end, to clearly show the 4bit Adders - 4 bit adder hirarchy.
			I either need 4 bit adders in the write back path, or just speculatively and fairly calculate the 4 bit results for both values of carry in. So the latter it is.
			I store both. And additionally this works as a pipline. So one of stored value of the last cycles is written back. 16*4 bit storage + 4 bit to govern the multiplexer.
			Multiplexers looks great in totem mole MOSFET and espcially CMOS.
			This is barely in balance with the total number of bits in my state. The program pointer lives in these 16*4 bits. Though I feel like I could do away with many inputs.
			For a counter, most of the time nothing will change. I need write access to them all, but not necessarily add. So half adders for the carry ripple are enough.
			No race because there is no input. Just the carry over versions are already available and generated as the target jump address is written into the programm pointer.
			Looks like for silence I should do the relative branch in this ALU. I could even use a full multiplexer in the center to send relative jump addresses to the PP to keep silence.
		</p>
		<h3>skew </h3>
		<p>
			stage 1 has 4 bit adders ( delay 0..3) .
			stage 2 has one 4 bit adder  ( delay 0..3 + 0..3 = 0..6) . 7 clock lines to kick of stuff from the register file .. and consequently also from the writeback register and the bus registers .. seems overkill.
			Maybe a full tree helps? Or I just slow down the edges enough. The address out Register would need to be made of 3 latches ( and not in series ) to jump the timing domains. 
		</p>
		<p> With n-FET and when you remember that p channel is slower in CMOS, there is not really a symmetry between inverted carry. So don't stress it.
			We don't lose much with a full binary adder tree, but we gain full equal run length. Need to capture state at every node.
			Yeah, sorry, addressing mode is still slow. But reg-reg instructions run like a charme if I capture two states per node, just as outlines for the two stage version.
			So reg-reg instructions run silently and fast (still limited by memory bandwidth), but all others take a lot of wait states.
			I am here for the silence. This still uses less transistors than a fat register file with skewed address lines.
			Skewed address lines reduce the fanout on the row line. So 2 stage carry look-ahead might be better here?
			But fanout is a big problem for addressing mode. I guess I may need more input registers to fetch far jumps completely before execution. So  immeditat16 for data is natural?
			With more registers I could run Load Store in parallel with reg-reg instructions. Just as with MIPS pipeline hazards/stall and JRISC scoreboards: Block access to the register.
			With MIPS all stages in the pipeline can be read to gather values. But I prefer the reg-reg instruction as the norm and scoreboard to block this.
			MIPS instruction decode still needs to know if a register is flowing through the pipe. So how? Compare with two names?
		</p>
		<h3>Stack</h3>
		<p>
			With this writeback, It looks like the stack pointer losts its special role. With the many cycles it takes to Load / Store, I can easily squeeze in the write-back instructions for the stack pointer.
			Pre-increment or decrement takes a cycle though. Ah, just have to pointers despite the write-back logic. Cycle their naming within the decoding stage.
			With 8-bit instructions I can only encode 4 GP-registers in addtion to PP and SP. I have tried. I is ugly that these only make up a small fraction of my state -- just like in 6502.
			This is really a big reason to go to 16 bit instructions. 16 registers and 16 cached instructions (plus address of sliding window and dirty flags, both as full registers with twice the register count ).
		</p>
		<p>
			A crossing between the data registers and the programm pointer is used to either multiplex data address or code address onto the address pins.
			This large crossing with its diagonal structure is also used to multiplex the 8 bit data bus (either input or output register) on either the low or hi byte of the 16 bit data bus
			(register write (Load) or one of the register read lines, respectively (Store, or as feed through: addressing mode)).
			And we should take adavantage of it to swap bytes. I don't like this odd instruction, but maybe I can use it to implement shift cx.
			Silence loves mulitplexers.
		</p>
		<p>
			The addressing mode "displacement"/"offset" is fankly quite slow. Each sentence is a cycle. Read immedediate8 (into input register (pipeline! no just a latch as in shared memory 6502 mode(or should I?))).
			Add im8 to register. Write sum to address out register. While memory does its thing, set carry for the ADD and write to address register. Read low and write Programm Pointer to address register.
			Read hi. Read next instruction. I really want to show off register-register operation and accept this timing.
		</p>
        <style>
			.grid-container {
			display: grid;
			grid-template-columns: auto auto auto auto auto auto auto auto;
			grid-gap: 20px;
			}

			.grid-item {
				background-color: rgba(74, 145, 121, 0.8);
  border: 1px solid rgba(0, 0, 0, 0.8);
  padding: 20px;
			}

.Register-File
			{grid-column-start: 1;grid-column-end: 3; }

        </style>
    </head>
    <body>
		<h2>registers File -- ALU</h2>
		<div class="grid-container">
			<div class="grid-item" style="grid-column: 1;"> Pre-decode Register </div><div class="grid-item" > Instruction decoder (PLA) and Interrupts </div><div class="grid-item" > Instruction Register </div>
			<div class="grid-item Register-File"> Gate derived from halved clock ( 6502 uses writeBack register, why cann't I let go from doubel buffer?) </div>
			<div class="grid-item" style="grid-column: 1;"> µ-PC (count down) </div><div class="grid-item"> PC </div> <div class="grid-item">half adder</div><div class="grid-item">Carry</div><div class="grid-item">half adder</div><div class="grid-item"> WriteBack Register </div>
			<div class="grid-item" style="grid-column: 2/6;"> &lt;- WriteBack </div>			
			<div class="grid-item Register-File" > Address decoder </div><div class="grid-item" style="grid-column: 3/6;" > µCode follow up instructions </div>
			<div class="grid-item Register-File"> Latch </div>
			<div class="grid-item Register-File"> Gate </div>
			<div class="grid-item" style="grid-column: 1;"> Data in Register </div><div class="grid-item" > X Register </div><div class="grid-item"> B Register </div> <div class="grid-item">half adder</div><div class="grid-item">Carry</div><div class="grid-item">half adder</div><div class="grid-item"> WriteBack Register </div><div class="grid-item"> Address Register </div>
			<div class="grid-item" style="grid-column: 1;"> Data out Register </div><div class="grid-item" style="grid-column: 2/6;"> &lt;- WriteBack </div>
		</div>
    </body>
</html>