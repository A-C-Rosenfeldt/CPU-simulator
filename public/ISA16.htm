<html>
    <head>
        <title>6502 ISA converted to load-store</title>
        <style>
            table,th,td{
                border: 1px blue solid;
                border-collapse: collapse;
            }
        </style>
    </head>
    <body>
        <h2> MUL DIV ROR BitScan</h2>
        <p>
            For MUL and DIV, the ALU and the ASR and SHR need to work together. This also shows why single shift is so much more important than arbitrary shift.
            The encoding for the multi-cycle instruction should look like the four basic instruction stuck into 16 bit. All registers are implied, or mostly?
            I need two shifts: The second shift register has a 1 which signals the end of the whole instruction. All other bits collect the result.
            Bit scan only uses this register -> defines the opcode.
            Looks like we have 4 opcodes in one. 4 bit opcodes are okay. I like how ASR and SHR become IMUL and MUL. Predicate for Add comes from the branch codes.
            MUL could run with 2 bits per cycle because we don't need to fully progress the bits. The second half of the look ahead circtuit otherwise is only made of half adders and a bit of waste.
            So I would need shift by two and two carry bits. This also gives us two register shift, where the second register is implied because our file can only be written to once per (final) cycle.
            Multi cycle is okay here? So we could even have two register barrel shift working in two cycles. Working in one, writing in too. Feels out of scope. We don't barrel shift!!!           
        </p>
        <p>
            Very long instruction words may make sense elsewhere. For exampe post-increment could be expressed in two MIPS instructions in one word.
            Similarly, with MUL and DIV a limit on 4 registers could be declared in the header.
        </p>
        <p>
            The CPU should be able to jump and then advance to the next instruction. So we cannot apply a trick with some stored more signigiciant bits.
            Rather the instruction pointer has a carry-look-ahead adder identical to the center part of the ALU ( after the bit operations, before the ShiftRight).
            The instruction pointer can do its own relative jumps because a full adder does not add a lot and we save a round trip over a bus.
            Jump to subroutine still needs a round trip. Anyway is good I guess. At least our relative branches don't stress the bus.
            ALU is not idle if we do RISC_V, though, here it is clear: We have to first compare and then add the relative address to the pointer. Clearly, concurrency is not achieved.
        </p>
        <p>
            Immediates are 8 bit ( our instructions are also 8 bit). This works well for signed jumps and adds (to replace inc and dec because it needs to work for 16 bit also?).
            Large memory allocation is not fixed. So no immediate values here.
            But for IO ranges, some magic numbers and bitfields, and line pitch in graphics mode it would be nice to load 16 bit values.
            This will probably happen at the beginning of a procedure, so no branches over us.
            So the idea (from ARM) is to load imm8,reg0 , and then set a counter to load n imm16 into the following registers. Or use the imm8 to point to a table somwhere where it does not hurt branches,
            but these kind of optimizations usually work.
        </p>
        <p>
            I need 16 bit alignment to double the branch range ( I also redefine values around 0). I also need it so that instruction pointer add is not the most expensive operatio in my processor.
            I may include the loop and loopz instructions from 8086 because those are the only counter uses I really want to have optimized.
            Yeah, like the RISC_V compare thise is a two cycle instruction .. but alignemnt is okay!
            This would work together with Load and Store instructions which advance their pointers like in 68k. At least then I only once have this byte/word flag and am done.
            Though the nice thing about add signed_imm8 is that it is so natural. For line drawings which pitch I only change to Add reg,reg . Pre, Post, mirror are all clearly shown.
            You can have a stride. You don't pay if for example you filter your memory access for transparency.
        </p>

        <h2>Speed!</h2>
        <p>
            Everything is a Multiplexer ( think: CMOS )
            latch pushes through a feedback loop
                jitter
                need larger Multiplexer anyway ( 0, next operand )
        carry look ahead
            finish on write back
            4+4+4 blocks so that the ALU can take in the half baked previous result
                we need two carry bits
                    maybe push it until they are really all used 0..3 ?
            clearly don't reley on write back going through register file
        barrel shifter ( and right and arithmetic right )
            is slow, so its own instruction
            runs in parallel with ALU
            super-scalar? As needed for MUL and DIV ?
            Hybrid, multi cycle to save transistors: 1bit, 4 bit . 0..3 cycles.
                I want CX as parameter and a wide register
                    µ-code? Bits fall out like with MUL and DIV?
                        implied Carry-Collector -Register
        
        </p>
        <h2>SH2</h2>
        There is really not much to be gained from staying with 8bit granularity even on an 8bit data bus.
        SH2 instruction set has almost 1:1 replacement for a lot of commands
        and makes NOT and NEG 2 byte in a logical way.
        With addresses as first class citizen we need Add #02 as likely as INC,
        thus only use the two byte version.
        Branches are 2 bytes already.
        16 bit immediates are kinda nasty.. Maybe offer some paring:
        load reg1 reg2 im1 im2 (with a reg0 to skip im2 like on MIPS, maybe then even only use reg+immediate addressing like on MIPS) . Or any instruction can have flag to become im+src -> target.
        <h2>power efficient CMOS with less noise on screen</h2>
        <p>So I think I should give up on byte opcodes. The second byte can be a literal or a target register. Also a segment+offset ( both register ) could be possible.
            Fixed instruction length simplifies the bus and the jumps, but immediates already introduce variable length instructions.
            It would even make more sense to do fixed 16 bit including the literals, then to do 8 bit without occasional extensions like in x86. x86 was great for its time. Just some minor problems like the order of the opcode bytes.
            If people hat to waste 16 bit on counters, we can (with 16 bit) hide them in addressing modes. Also Add nibble would make sense with 8 bit granularity and 16 bit pointers.
            Now I wonder how SH2 loads memory addresses.
        </p>
        <p>I increase the total register count from 7 to 8 and trade that with counter registers.
            Those have 4 normal bits, but the high 12 bits can only be counted up, down, or cleared. All 16 bits can be connected to the address pins ( no latch in between => less state).
            For offset the write back register can be connected to the address bus. Thus these two need to be 16 bit wide :-( .
            The address decoder for the register file should work a like routers in a tree so that they can act as a guide to the eye.
            Generally, clock lines are to be avoided. Here the clock runs with the route in form of WE and OE .
            The writeback register depends on the clock. Maybe we could just skip it for instructions which don't need it?
            This may justify AL AH addressing in both sources. So the coder gets more ways to avoid accumulation?
            When the register file already has byte granularity, 4 bits are enough to specify signed shift if I later want to add it.
        </p>
        <p>
            Generally it would be nice to push values out of reduntant area. For relative jumps 0 halts ,1 is illegal in 8 instruction addressing or long jumps in 16 bit instructions , and 2 is NOP.
            If I allow for 4 bit for register ( hi low + 3 names), byte immediates ( sign extended to align with jump interpretation) are pushed away from the nibble range.
        </p>
        <h2>registers</h2>
        <table>
            <thead>
                <tr>
                    <th>Lo</th><th>Hi</th><th>long</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>P</td><td>P</td><td>Programm counter</td></tr>
                <tr><td>B</td><td>C</td><td>Accumulator { Buffer:Counter } </td></tr>
                <tr><td>X</td><td>X</td><td>IndeX</td></tr>
                <tr><td>Y</td><td>Y</td><td>another 6 Indices. Even enough for texture mapping</td></tr>
                <tr><td>S</td><td>S</td><td>Stack Pointer</td></tr>
                <tr><td>F</td><td></td><td>Status Flags: ZNCVID  (oVerflow)</td></tr>
            </tbody>
        </table>

        <h2>Instruction encoding</h2>
        Instructions with two source registers use each bit to select between two possible source for each input of the ALU.  Default accessible register (general purpose) are BCXY.
        Abbreviations: Immediate. Cnd=Condition. Function "Lambda" L. D is direction, 0: towards GeneralPuroposeReg, towards Flags, towards Registers (first wins)
        <table>
            <thead>
                <tr>
                    <th>OP Code</th><th>Function (SubOp)</th><th>source Register(s)</th><th>other source</th><th>Target Register</th><th>Explaination</th>
                </tr>
            </thead>
            <tbody>
				<tr><td>0</td><td>LL0LL</td><td>RRR</td><td>SSS</td><td>TTTT</td><td>Register, Register => Target Register Operation. {TTT0=low byte, R==S && L=and=> BIT, sub=>CMP (xor==clear) }</td></tr>
                <tr><td>0</td><td>L11LP</td><td>VVV</td><td>SSS</td><td>TTTT</td><td>Verbatim (signed int) replacing operand at Position, Register => (Register) Operation </td></tr>
				<tr><td>0</td><td>D01QP</td><td>VVV</td><td>SSS</td><td>TTTT</td><td>Verbatim (signed int) replacing operand at Position P. Persist result?: Q. Register is used as memory address to Ld/St (D) TTTT. (L=Add) </td></tr>                
                <tr><td>0</td><td></td><td>LL</td><td>TT</td><td>LLLL</td><td>immediate value</td></tr>
                <tr><td>0</td>	<td></td><td>D</td><td>FF</td><td>0</td><td>Set Flag FF={CVDI} to value/Data</td></tr>
                <tr><td>1</td><td>00</td><td></td><td>=RRR</td><td>Cond</td><td>Branch</td></tr>
                <tr><td>1</td><td>01</td><td></td><td>=RRR</td><td>DPSI</td><td>See next table</td></tr>
            </tbody>
        </table>

        <h3>Details</h3>
        <table>
            <thead>
                <tr>
                    <th>P involved</th><th>Stack Involved</th><th>Direction (to GP:0)</th><th>Immediate</th><th>Explanation</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>0</td><td>0</td><td>0</td><td>0</td><td>TSX</td></tr>
                <tr><td>0</td><td>0</td><td>1</td><td>0</td><td>TXS</td></tr>
                <tr><td>0</td><td>1</td><td>0</td><td>0</td><td>PLP</td></tr>
                <tr><td>0</td><td>1</td><td>1</td><td>0</td><td>PHP</td></tr>

                <tr><td>1</td><td>0</td><td>0</td><td>0</td><td>NOP (where else?)</td></tr>
                <tr><td>1</td><td>0</td><td>1</td><td>0</td><td>RTS (shifted from below)</td></tr>
                <tr><td>1</td><td>1</td><td>0</td><td>0</td><td>RTI,(Flags are GP, so this is more specific) </td></tr>
                <tr><td>1</td><td>1</td><td>1</td><td>0</td><td>BRK (where else?)</td></tr>

                <tr><td>1</td><td>0</td><td>0</td><td>1</td><td>JMP</td></tr>
                <tr><td>1</td><td>0</td><td>1</td><td>1</td><td></td></tr>
                <tr><td>1</td><td>1</td><td>0</td><td>1</td><td>JSR </td></tr>
                <tr><td>1</td><td>1</td><td>1</td><td>1</td><td></td></tr>

                <tr><td>0</td><td>0</td><td>0</td><td>1</td><td></td></tr>
                <tr><td>0</td><td>0</td><td>1</td><td>1</td><td></td></tr>
                <tr><td>0</td><td>1</td><td>0</td><td>1</td><td></td></tr>
                <tr><td>0</td><td>1</td><td>1</td><td>1</td><td></td></tr>

            </tbody>
        </table>        
        <h3>8 or more Register-Register Functions</h3>
        ADC, SBC, SBC with operands swapped, CMP.
        BIT, AND, OR, EOR.

        ADD, swap, SUB, conditional stuff for MUL and DIV and navigation in 2d Arrays?
        <h3>Navigation</h3>
        In last Dimension: ADC #00, SBC #00. Former Dimensions:  Cond.: Carry=1 ? ADD Pitch16register 

Note that for most of these the order of R and S is arbitrary, so can encode two operations.
        <h3> 8 Branch Conditions from 6502</h3>
        <p style="white-space: pre-wrap;">
        = &lt;&gt;
        &gt;= &lt;
        C NC
        V NV
        </p>

        The Programm counter runs on it own. Only for branches, the main ALU is used. For this, the microcode can address it like a general purpose register.
        Microcode can alos access Stackpointer. Microcode has only BRK at the end, but no branches. Each Microcode instruction takes one cycle.

        Microcode has a bit to trigger loading the Instruction Register. This is important to switche between pre-decrement and post-increment.
        Also needed to schedule Memory access differently for Load and Store and Immediate.

        <h2>not ISA, but µ-Architecture taken from 8510</h2>
        <table>
            <thead>
                <tr>
                    <th>Lo</th><th>Hi</th><th>long</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>A</td><td>A</td><td>Address Register</td></tr>
                <tr><td>DI</td><td></td><td>Data in</td></tr>
                <tr><td>DO</td><td></td><td>Data out with Tristate buffer</td></tr>
                <tr><td>PD</td><td></td><td>Pre-decode register</td></tr>
                <tr><td>I</td><td></td><td>Instruction register</td></tr>
                <tr><td>Q</td><td>Q</td><td>Programm counter WriteBack</td></tr>
                <tr><td>W</td><td>W</td><td>ALU WriteBack</td>
                <tr><td>M</td><td></td><td>Micro-Code instruction counter (per cycle, each cycle has 4 (or 8?) phases)</td></tr>
            </tbody>
        </table>
<p>
        The Lo ALU has to inputs connected to XL, B , P  and YL, C, D, S. It has Carry look ahead. AND, OR, EOR, ROR is implemented per bit with some circuitry just as in 8080.

    The high ALU can only do ++ and -- . It uses inverters on odd and even bits and has a flat carry with alternated inverted bits. Inputs are: S,X,Y,P

</p>

<p>
    JRISC is MIPS ( 32x32 register file) where one source is also the target to have 16 bit encoding. This is similar to many onthers like Atmel8bit, SuperFx, SH2.
I wonder if reduced instructions can be sorted in a different way than MIPS does it ( based on immemdiate). That is more 32bit encoding stuff like also for RISC_V.

Due to pipeline, the source registers are encoded as address. One bit denotes a literal => 2*6 = 12 bit
We could specify a target:
writes to second Source?  1 bit
	ALU
		commute
			4   2 bit
        don't commute
            sub
                only instruction which allows a constant in both operands (xor)
            shift. 3 bits ?? 
                rotate?
                left right  ( only for constant .. check which side is constant)
                signed?     ( only for not rotate and right)           
	LoadStore
		Move  pointer          --  regs only 
		Add   Adreessing mode  --  literal   .. implicit register like in 6502 (X,Y), 68k, z80 (SI, DI)
flags?  Write to Flags? 1 bit
	writes to
		CMP
		Test
		Btest
	reads
		Jump  ( all jumps are conditinal .. all other instructions are not)
	both
		ADC
		SBC
implicit
	Jump
</p>
<a href="pipeline.htm">Pipeline</a>
<a href="Multiplication.htm">Pipeline</a>
    </body>
</html>