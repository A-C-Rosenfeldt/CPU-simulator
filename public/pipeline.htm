<html>
    <head>
        <title>Simple Pipeline</title>
        <style>
            table,th,td{
                border: 1px blue solid;
                border-collapse: collapse;
            }
        </style>
    </head>
    <body>
        <h2>FlipFlop is two latches in series</h2>
        <p>How is this different compared to two latches (SRAM cells) on a bus? A latch (all for N-MOS) needs two transistors to gate the input. So we have two gates.
        Each SRAM cell also has these gates on the input, but additionally we need to gates towards the bus to create a multiplexer.
        When the clock switches, a FlipFlop opens the input gate of the second latch, while the multiplexer opens the output gate of one cell.
        With a flip flop the signal then needs to propaget through the second latch. We can take this into account. I mean, the register read access is the most critical for timing, so registers reside in SRAM.
        There is a bus anyway and it saves us latches times number of registers ( something lik 8). But for the write-back register, flip flops are good.
        I mean, I could just place two write back registers on the register file. Then instruction decoding renames registers. So there is minimal latency at each ALU operation start.
        Write back of course still happens behinde the scenes.
        </p>
        <p>
            I can hardly justify not to use flip flops for the flags. Here the latency of the carry flag is matched by the speed of the buffer of the SRAM read out circuit.
            Layout of a mini-bus is just so ugly. 4 phase 
        </p>
        <p>
             Both need a balanced clock, or better let's say: 4 phases. A non-overlapping clock. As on 6502 a delayed clock is created on chip, by the same kind of transistors, same Vdd and temperature.
            Just as timing is created in a lot of flip flops. AND between original and delayed clock gives us non-overlapping pulses.
            Only the clock signal needs to be clean for this .. unlike for flip flops, where timing could mess up everywhere. People say that the circuit is static.
            As long as the clock has sharp edges compared to delays in gates, all the other signals can change as gradually as they want.
            I want to show the original sine (crystal) and cosine (LC matched to crystal) of the clock, but not simulate because it uses other physics.
            The clockwork than works full quadrature (analog multiplication of complex numbers) to avoid flip flops with internal timing. Ah so, I lied, I don't use the physical dealy like in 6502.
            </p>
            <p>
                Clocks in ICs don't work like in physics. The oscillator only senses voltage (no current or whatever). It then directs current "up the hill". The input capacity of the sensing mosfets reduces the frequency, but does not lead to a phase shift.
                The clockwork does not operate on sine waves. Signals are not small, but huge.
                The second phase is just produced by a delay line. We don't even care for 90Â° phase. We just care for a delay which works with the integrated transistors ( "the process technology" of the IC).
                Just to avoid more of these delay chains, the clockwork not onyl accepts two phases, it also sends two phases to the next stage.
                For maximum frequeny (of the first stage actually), I don't attempt to AND away overlap.
                Instead 4 RS latches ( and an inverter) are arranged in a square. Horizontal transmission is enabled by one phase ( and inverted). Vertical by the other. The whole square is not transparent unless we feed it with a sine and 
                transparency reaches below 0 for some volts. The two phases are derived from one Horizontal and one vertical edge. And inverter is on one of the 4 edges. We don't care about the asymmetry.
                RS-latches are balanced. The next stage needs the signal and the inverted signal. So this matches. Because all stages are next to each other, 4 traces don't hurt anyone.
                The first two stages simulate the real CPUs of the day which used off-the-shelf TV crystals, but were not fast enough throughout. Still a simple clock divider circuit could deal with the full 15 MHz.
                At half the clock hand tuned video ciruits worked. At quarter the Z80 ran. And my design needs the next divider to flip direction between both instances of IP and SP. Though I forgot why I cannot use two RS-latches in series here.
                Only the the GP register file is large enough to save a lot transistors by sharing one write-back register / register renaming. Renaming could use a series of RS-latches, or toggle.
                It kinda feels like waste to juggle values between the instance while nothing happens (no stack operation, no code fetch (but data), no renaming (move, load, store, branch), no flag change). So series is it.
                Why don't they have a nice name? Who cares about toggle flip flops? Why is an RS latch already called a "flip flop" ??
                Anyway, I cannot do without a stack in the 8 bit ISA because I need to free register for the inner loop. And my inner loops need already 4 registers. With source and target this is the operand nibble in the opcode.
                Orthogonal operation - operand is just easier for the compiler. I may allow an offset = Peek instruction on the stack. And TAS, TSA . All 4 registers can hold an address ( then full 16 bit). Weird to use the lower 8 bits for logic.
            </p>
        <h2>write back register</h2>
        <p>Write back is written to happen in the next cycle, but I think a detailed (8 phases) timing makes the process more clear.
            I would rather like to have a multiplexer with two write-back registers or register renaming because the process looks so complicated otherwise.
            But it works: Max dut cycle for the ALU and a multiplexer to route through a barrel shifter (ALU can only shift &gt;&gt;1 ).
        </p>
        <ol>
            <li>register to ALU</li>
            <li>ALU is working (3 phases)</li>
            <li>ALU to write-back</li>
            <li>isolate write-back register input </li>
            <li>if the next instruction needs the write-back, send it to ALU (concurrently with the other source register)</li>
            <li>write-back to register file while ALU is working</li>
            <li>isolate register input and enable register to ALU</li>
            <li>remove write back output from ALU</li>
            <li>goto: ALU to write-back </li>
        </ol>
        <p> Since this is CMOS I'd like to reduce cross-over in multiplexers ( storage: feedback vs input value ). So power on one input is blocked, next phase: other input is enabled.
            I mean, to discard the old value. To capture the new value in the D flip flop: feedback is turned on and input is removed in the next phase.
        </p>
        <p>
            RISC-V does ALU flags to condition flag within one pipeline stage.
            Now I don't want too much work in each state.
            On the other hand I still need some usage for the second byte in 16 bit instructions.
            Conditions need too much space. ARM has 32 bit words and can have them.
            6502 has 8 Conditions+BRA, but x86 has 16 and they are needed for signed.
            Though I would replace the two parity branches with branch always or something.
            RISC-V has only comparison for branches. So to check for a negative number, you'd compare with zero.
            RISC-V does not even have a dedicated zero register.
            These are only needed if one operand flag setting is used for example in MIPS or with the 6502 load instruction:
            Jump if sign, Jump if not sign.
            RISC-V and MIPS have large enough registers. To keep with the 8 bit vibe, I need carry .. but why overflow?
            Carry is need for example if I store a pixel address as memory address and have the x and y fractions in their own registers.
            Why does x86 have: Jump if less or equal? This only makes sense if one of the operands is an immediate.
            This is a bit like with sub, where we also like to have a bit to swap positions of the sourc reg with the immediate value.
            Those bit and the less-or-equal should not be available if both sources are registers.
        </p>
		<h2>registers</h2>
		<p>
At least 4 phases per cycle are needed. I need to store values in each phase (for a static design). Storage is called register, latch or D-flip flop. It is all the same:
Input is either ignored, or transparently forwarded. On falling edge, the value is captured.
</p><p>
Next latch needs to block intput before the latch before that opens each own. Sketching a graph with phases on Y and latches on X.
Different cycles are white diagonal lines with height 2 px / widht 2 px. They are separeted by black lines of 2px height and width.
</p><p>
    It would be cool to have a higher duty cycle. I can only imagin latches as SRAM memory cell .. in this case as n-fet. These cell have a resistors with a high resistance to reduce current while storing.
    Additional write current can easily flood this resistor. Write Enable is the power source of the write circuit.
</p>
<h3> Akkumulation in an 8 phase clock with 2 stages of pipeline shown: Execute and WriteBack </h3>
<table>
    <thead>
        <tr>
            <th>register file</th> </th><th>Processing (incl. read select)</th><th>WE</th><th>Writeback Register</th><th>Processing (incl. write select) </th><th>WE</th><th>register file</th><th>duty cycle</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>A</td>               <td> hold   </td><td>   </td><td> </td>               <td> --->    </td><td>  </td><td> </td>  <td>  </td>  </tr>
        <tr><td>A</td>               <td> -->    </td><td>   </td><td>B</td>               <td> ---->   </td><td>  </td><td>A</td> <td> </td>  </tr>  
        <tr><td>A</td>               <td> --->   </td><td>   </td><td>B</td>               <td> hold    </td><td>  </td><td>A</td>  <td>  </td>  </tr>
        <tr><td>A</td>               <td> ---->  </td><td> -></td><td>B</td>               <td> -->     </td><td>  </td><td>A</td>  <td> both processing => 5 phases </td>  </tr>
        <tr><td>A</td>               <td> hold   </td><td>   </td><td>B</td>               <td> --->    </td><td>  </td><td>A</td>  <td>  </td>  </tr>
        <tr><td>AC</td>              <td> -->    </td><td>   </td><td>B</td>               <td> ---->   </td><td>-></td><td>AC</td> <td> </td>  </tr>
        <tr><td>C</td>               <td> --->   </td><td>   </td><td>B</td>               <td> hold    </td><td>  </td><td>C</td>  <td> </td> </tr>
        <tr><td>C</td>               <td> ---->  </td><td> -></td><td>B</td>               <td> -->     </td><td>  </td><td>C</td>  <td> both processing => 5 phases </td> </tr>
      
    </tbody>
</table>

<h3> What happens with an additional hidden register ( ALU input or carry look ahead apex register ) ? </h3>
<table>
    <thead>
        <tr>
            <th>register file</th> </th><th>Processing (incl. read select)</th><th>WE</th><th>intermediage stage Register</th><th>Processing </th><th>WE</th><th>Writeback Register</th><th>Processing (incl. write select) </th><th>WE</th><th>register file</th><th>duty cycle</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>A</td>               <td> ->           </td><td>   </td><td> </td>          <td>           </td><td>-></td><td> </td> <td>         </td><td>  </td><td> </td> <td> switching. Make this 5 times as long to create good duty cycle. </td>  </tr>        
        <tr><td>A</td>               <td> -->          </td><td>   </td><td> </td>          <td>           </td><td>  </td><td> </td> <td>         </td><td>  </td><td> </td>  <td> two switch blockade</td> </tr>
        <tr><td>A</td>               <td> --->         </td><td>-> </td><td>B</td>          <td> ->        </td><td>  </td><td> </td> <td>         </td><td>  </td><td> </td>  <td> first two parts are processing </td> </tr>
        <tr><td>A</td>               <td> ---->        </td><td> -></td><td>B</td>          <td> -->       </td><td>  </td><td> </td> <td>         </td><td>  </td><td> </td>  <td> source register is still protected </td>  </tr>
        <tr><td>A</td>               <td> ----->       </td><td> -></td><td>B</td>          <td> --->      </td><td>-></td><td>C</td> <td> ->      </td><td>  </td><td> </td> <td> All three parts are processing => 3 phases </td>  </tr>
        <tr><td>A</td>               <td> hold         </td><td>   </td><td>B</td>          <td> ---->     </td><td>-></td><td>C</td> <td> -->     </td><td>  </td><td> </td>  <td> two switch blockade </td> </tr>
        <tr><td>AD</td>              <td>              </td><td>   </td><td>B</td>          <td> ----->    </td><td>-></td><td>C</td> <td> --->    </td><td>-></td><td>AD</td>  <td> storing in target </td> </tr>
        <tr><td> </td>               <td>              </td><td>   </td><td>B</td>          <td> hold      </td><td>  </td><td>C</td> <td> ---->   </td><td>-></td><td>D</td>  <td> two switch blockade  </td>  </tr>
        <tr><td> </td>               <td>              </td><td>-> </td><td>B</td>          <td>           </td><td>  </td><td>C</td> <td> ----->  </td><td>-></td><td>D</td> <td> Next instruction  </td>  </tr>  
        <tr><td> </td>               <td>              </td><td>-> </td><td>B</td>          <td>           </td><td>  </td><td>C</td> <td> hold    </td><td>  </td><td>D</td>  <td> processing </td>  </tr>
        <tr><td> </td>               <td>              </td><td>-> </td><td>B</td>          <td>           </td><td>-></td><td>C</td> <td>         </td><td>  </td><td>D</td>  <td> All three parts are processing => 3 phases </td>  </tr>
        <tr><td> </td>               <td>              </td><td>   </td><td>B</td>          <td>           </td><td>-></td><td>C</td> <td>         </td><td>  </td><td>D</td>  <td> switch off </td>  </tr>      
    </tbody>
</table>
<p>
    So, the processing ciruitry is stable (not doing work) for one phase, same as with 2 regs. Work is split accross three ciruits instead of two. 5 phase overlap like the case above.
    The most important difference seems to be that I now always have at least 3 cycles to securely overwrite an old value in a SRAM cell. Though at the beginning there may be some switching noise and settling.
    It sure does not make sense to use more stages in a  Register - Operation -> Register  if the result is needed for the next instruction.
</p>

<p>
So the signal needs some time to pass through the processing circuits. With a second write-back register

Problem is that I need a latch for each phase, so like 6 transistors.
Lets recount: Register file is part of the (spiraling data path). Then there is the write-back register. SAP and 6502 have registers on ALU inputs ( so maybe before Carry? ).
I mean I would love to double buffer some paths of the carry look ahead and thus put 3 latches into this path. I may need a double buffer anyway to extract the carry
and provide it for the next instruction.
</p><p>
Double buffering is not needed because in 3 phases ( or 5), the circuit are all connected up to the last gate before the target register. Any fast paths just already pass through.
Hopefully the two register slow down the fast path to reduce some switching noise. Maybe overcompensate speed by late WE? Does this improve hold of previous cycle?
    Double buffering is made possible by a counter to toggle between them. The instruction word is decoded by random logic for the ISA. The address is decoded already from the start
because I only address 8 registers and this is just a byte. Writeback is decoded while ALU works.
</p>
<p>
    With two cycles needed to read an instruction, one-cycle microcode to do multiplications, shifts, scan, and large integers sound attractive. Also addressing modes. Uh, CISC here I come.
    Basically, this CPU needs a 16 bit wide code queue or cache. Nobody accepts that it runs at half its speed most of the time. Instead of REP and MUL, we have an 8 instruction cache with zero overhead loop.  
</p>
</body>
</html>