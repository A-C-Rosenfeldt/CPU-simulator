<!DOCTYPE html>
<html lang="en">
<head>
    <title>Hello World</title>
    <link  rel="stylesheet" type="text/css" href="color.css"/>
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico">

</head>
<body>
    <style>
        body{
            background-color: rgb(28, 67, 73);
            color: white;
        }
    </style>

    <h3>WebGl for printf</h3>
    Just setting RGB on a line of pixels and let the browser display a square canvas on screen. <br/>
    <!-- <canvas id="GlCanvas" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas> -->
    <p class="bandGap_insulator"> Insulator </p>
    Color Codes: red=bandgap, blue = charge density <br/>
    <canvas id="FieldGl0" width="540" height="100" style="border:1px solid #000000;" class=""></canvas>
    This field will be converted to matrix in the section after the next section
    <br/>
    <canvas id="FieldsCanvas" width="100" height="100" style="border:1px solid #000000;" class=""></canvas>
    <canvas id="FieldGl" width="640" height="300" style="border:1px solid #000000;" class=""></canvas>
    <br/>    
    <h3> display values in a matrix and then add a row to another. Test spare-datastructure </h3>
    <!-- <canvas id="MatrixCanvasGl"  width="100" height="100" style="border:1px solid #914242;"  class=""></canvas>     
    <canvas id="MatrixCanvasGl0" width="100" height="100" style="border:1px solid #24803f;"  class=""></canvas>     
    <canvas id="MatrixCanvasGl1" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>         
    <canvas id="MatrixCanvasGl5" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
    <canvas id="MatrixCanvasGl15" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
    <canvas id="MatrixCanvasGlSwap" width="100" height="100" style="border:1px solid #23E;"  class=""></canvas> -->
    <canvas id="MatrixCanvasGlSwapMiddle" width="760" height="100" style="border:1px solid #28E;"  class=""></canvas>
    There do exist test cases or matrix inversion. I have no pivot, so can only test small rotations.
    <script src="TestGl.js" type="module" ></script>
    <br/>
    So checking the Canvas by drawing a line, then checking if a single entry in matrix is displayed ( dispalyed down here because it is boring) <br/>
    <!-- <canvas id="MatrixCanvas" width="100" height="100" style="border:1px solid #000000;"  class=""></canvas>     -->
    <script src="TestEnforcePivot.js" type="module" ></script>
  
 
    <script src="TestFields.js" type="module" ></script>

    <br/> Now some bands generated from a smaller ( 4x4 ) field .
    But what part? How to see? Test? I should start with simple boundary and not electrodes and then plot the field. There are tests like that which in first pass exposed indefinite matrix
    <br/> 
    <!-- <canvas id="FieldGl0_field" width="100" height="100" style="border:1px solid #000000;"  class=""></canvas>
    <canvas id="FieldGl0_mat" width="100" height="100" style="border:1px solid #000000;"  class=""></canvas>
    <canvas id="FieldGl0_tri" width="100" height="100" style="border:1px solid #000000;"  class=""></canvas>
    <canvas id="FieldGl0_NoSwap" width="100" height="100" style="border:1px solid #000000;"  class=""></canvas>
    <canvas id="FieldGl0_tri_blank" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
    <br/> -->
     But first we check the matrix by changing voltages on cells.
    Now rows appear as Green functions. (there do exist test cases already, but we want eye candy) <br/>

    ToDoubleSquareMatrixSortByKnowledge() connects metal.<br/>

    <p>Now I apply Matrix math to the field. We have test cases (automated). We love them all so, copy</p>

    <div class="grid-container">
        <!-- <div class="grid-item">
            <canvas id="FM_2d" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
        </div>
        <div class="grid-item">
            <canvas id="FM_2d_processed" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
        </div>        
        <div class="item1">
            <canvas id="FM_Square" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
        </div>
        <div class="item1">
            <canvas id="FM_Square_processed" width="100" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
        </div> -->

        <div class="grid-item">
            <canvas id="FM__example" width="320" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
        </div>
        <div class="item1">
            <canvas id="FM__example_processed" width="320" height="100" style="border:1px solid #6e2480;"  class=""></canvas>
        </div>        
    </div>
    <script src="TestFieldPlusMatrix.js" type="module" ></script>
    <p>
        Going from left to right:
        Green starts occupied cells and reds starts a gap (0000)
    </p>
    <canvas id="inverse" width="1900" height="300" style="border:1px solid #6e2480;"  class=""></canvas>

    <p>
    reduce console.log output!
    what about the large field in the showcase?
    add some electrodes?
 cosine generator with 3 s period .. Even just hard code sine, too , to show 3 independant electrodes
</p>
    <!-- would need  MDN.createWebGLProgramFromIds() --><script id="vertex-shader" type="x-shader/x-vertex"></script>

    <!-- type="text/javascript"   <canvas id="GlCanvas" width="600" height="400" style="border:1px solid #000000;">

    </canvas> -->

    <ul>
        <li>Add slider</li>
        <li> do poisson based on gate (with all other borders at ground potential</li> 
        <li> multiple gates. </li>
        <li> random charge density </li>
        <li> current </li>
        <li> Test in <a href="https://mochajs.org/">Mocha</a>Mocha</li>
    </ul>

    <form>
        <input type="range" min="1" max="100" value="50" class="slider" id="myRange">
    </form>

    <!-- <script src="helloworld.js" type="text/javascript" ></script>
    <script src="gl-matrix.js" type="text/javascript" ></script>   
    <script src="GL.js" type="text/javascript" ></script> -->
</body>
</html>