<html>
    <head>
        <title>Navier Stokes</title>
        <style>
            table,th,td{
                border: 1px blue solid;
                border-collapse: collapse;
            }
        </style>
    </head>
    <body>
		<h2>Degrees of Freedom: Cut down on the velocity state!</h2>
		<p>
			I have decided to only allow current on wires. So for the FET there is the channel. I don't care about cross section. I just draw a bold line which gets more blue with more charge.
			The gate can also be just the wire pressed against the oxide. Opposite charge should have opposite colors, or does it? Like polysilicon gate .. so the gate is also a semiconductor.
			The gate dielectic is a complex chemical layer with a high bandwidth (insualtion) which also creates the step in the electric field so that we get depletion mode transistors.
			The electric field (potential) stays 2d. Just as in reality the power-rails act as shield. In the coaxial cables the potential is a double line.
			For signals, a single line is usual. So even in the cables the charge needs to be shown.
		</p>
		<p>
			I ran out of colors and looked back at the symbols. So I don't show wires in the same way as the transistor. Wires have field + charge combined as cyan running through a black tube between boring antracite filler.
			The interface to the transistor color scheme is a 90Â° bend like on the symbols. Gates are drawn as semiconductors, but I show carrier density, not charge density.
			Doping is essential for a transistor and my interests: Why is it different than a tube, why do we have enhancement and depletion mode?
			But inspired by level shifters and HEMT, I don't actually dope, but show polarisation on insulators as a black-red pattern.
			So insulators have a pattern? Can I show different patterns?
			For clarity and to match the symbol, only the constant current pull up is a finfet, where the gates open up in the shape of a parabola with the area filled with immobile charge.
			This leads to constant axial field strength. The drain is simple. There is a small gap between gate and drain.
			This gap prevents the drain to reach into the channel and reduces gate drain capacity. But really it mostly resembles as resistor like pull up at the upper logic level. Kinda nostalgic. So don't make it too large;
			I say: half the length of the channel to bring it almost in line with the following:
		</p><p>
			For the 4-NAND / CCD tyoe of transistor I use the body diode to show the electric potential.
			I think that these are enhancement transistors. They work like capacitors. Metal gate and intrinsic channel connected to n doped region at negative electrode ( and vide versa in CMOS).
			No polarisation here. A far away, p+ doped region is enough to form a body diode. The diode exists as long as the negative doping of the signal electrodes reach into the channel .. ah they do,
			I don't go into saturation and so even in reality, no latch up would occur.
			I mean, I could probably use my color channels and overlay the field onto the gate and the channel.
			Just how do I not waste too much space for the body diode. Back diode as interface to wire-land? Even an insulator will finally end up on some metal screen in a good design.
		</p>
		<p>I saw a MOS circuit, which uses an inverter and wired-or a lot to avoid a series of transistors. I guess that this is faster, but a series of gates is smaller and needs less energy per cycle.
			It also looks cleaner than random inverters. It looks cleaner than CMOS where everyting is duplicated. I will not pre-charge because that needs additional wires and is actually just
			a speed up to the normal pull-up transistor which I still need because I want to show leakage.
			I will use two metalization layers: Criss and cross. Those look clean on the screen. I may add some shadow effects to hint at the bridges, but mostly vias are shown as dots.
			Crossings are much more common than vias: Just think about SRAM or the control lines in an advanced ALU.
			An address decoder does not much. I think it is fair to implement it using slow 4-NANDs and give them a whole cycle.
		</p>
		<p>
			After paint, it looks like the only channels I overlap will be : 
		</p>
		<ul>
			<li>mobile carrier density (blue) and electric potential in the channel.</li>
			<li>static doping (red) and electric potential in the gate dielectric and the depletion zone of the body diode.</li>
		</ul>
		<p>So metal should use all three color channels, like grey or brown. But as written above, the gates are shown as semiconductors .. no they are metal in n-mos. 
			I mean dead end semiconductor will work, floating instead of pull-up. But it is a fab detail. Does not explain operation, certainly no MVP.
			
		</p>
		<p>
			The pull up transistor as a current limiter still works. I guess that the single dimension charge killed the quare law for FETs. Square law is a temperature effect just like the exp() in a diode.
			Temperator diffuses the charge carriers. Opposite carriers on both sides of a thin ( relative to diffusion length ) dielectric pull on each other.
			Carriers come closer and the capacity increases.
			I am okay with a linear relation-ship.
		</p>
		<p>
			A realistic MOSFET is ohmic. Carrier velocity is given per electric field strenght. This is no tube. Navier-Stokes is more asthetic, but I want to explore the 6502 and Z80 way.
			So for the current "source" for pull up, doping ( or my special dielectic chemistry ) create a homogenous field.
			A FinFET connected to the output of the gate shields the channel from the rails almost like the Whenelt cylinder in an electron gun.
			The dielectric needs a gradient. The drain needs to sit within the screen and the dielectric, which also covers the "upper" side of the gate. 
			This has the same function here as the frozen static charge to let carriers hop from gate to gate. Also this charge prevents carriers of opposite charge to enter the channel --
			in conjunction with a bandgap. I ditched 2d fluid sim, but keep the electro-static field.
			The width of the bandgap does not become apparent because I don't even deplete the channel completely for my rounded curves,
			but I need it to explain why my gates, which I want to display as "channels" of opposite carrier polarity, exist.
			CMOS may be easier because the roles or source and drain are allowed to switch. Though still only channel carriers are allowed. The strongly doped N regions
			isolate the channel from the metal and make sure that only the correct carriers can enter. The channel itself is close to the gate and dielectric and will always be slightly charged in the correct way.
			I say this because in a very long channel evan a small derivative of the electric field may let it drift all the way through the bandgap.
			This is already confusing if it happens locally on one of the 4 gates of the 4-NANDs I want to have.
			The carriers in the channel only feel the force along the channel. So even if the gate is positive ( relative to the rails?). Uh should I introduce a (Vdd+Vss)/2 for schields?
			Ah, no shield is positve ( Vss ) to favour electron carriers at source and drain.
			With the constant current source the drain is not allowed to inject carriers. I needs to behave like an anode in a tube ( where all carriers are negative). 
		</p>
		<p>
			Do I even need a polarized dielectric for the normal gates? Like when the input is at rail level, then the channel-gate capacitor is not charged at all (space charge).
			I even accept a small leakage to give me more rounded signals. When the mosfet conducts, the output will approach the (negative) rail.
			So my signal level is close to the negative rail. I cannot even prevent that gates will approach .. ah I have the constant current from the pull up.
			The gate conductance will be reduced. So unlike CMOS, I will not reach rail values in the signal. So I need "doping" or polarisation to create slightly "enhancement" transistors.
			I already need the colors for pull up. So either a more complicated dielectric for n-MOS or two kinds of channels for CMOS.
			With CMOS I could show the gate as a semiconductor with opposite doping. Ah problem is the color on the wires. I don't want a break there and surely no polarized dielectric. 
		</p>
		<p>
			One dimensional simulation of compressible fluid still can be either on grid or go with the flow. The latter may allow me fast edges in my gates with maybe less aliasing effects.
			So each cell has its density and velocity. Force ignores velocity because the equations give us force per particle.
			So we use acceleration to propagate veleocity and position and map these new positions onto the static (relative to the electrodes) grid. We split the particle count based on overlap range.
			We do likewise with the momentum. Now it might be interesting to stagger here. Density affects the field on the cells. The momentum affects the velocity on the borders.
			The gradiant of the field of the border accelereates the velocity. Drain just means cutting out all electrons which overlap metal after propagation.
			The source / emitter still should emit based on field strength. So for a pulling field the surface boundary is accelerated from a stand still. The void is filled with a configurable density.
			I want to show space charge for the pull up and the pinch off effect. These aren't even transient effects. So I basically need to check that the emitter is just not limiting by operation.
			Too much emittance leads to back flow and oscillation, same as in more dimensions.
		</p>
		<p>
			I don't use verlet integration because it would have to include the electo static calculation also.
			So it is a cross-cutting concern which needs some advanced coding technique to be implmented in a clean way.
			It would take the whole state and all deltas ( potential change of the electric field). We have more variables because we have the current position to calculate force.
			We use this to accelerate the current velocity, but add this veleocity to the old state, which we still need to keep.
			Also it would be very interesting to have a life switch to see its effect.
		</p>
		<p>
		The full NS equation with density is not even discussed by many. So much state!
		So with a FET we talk about a channel. So not only don't we need different velocities at one location ( particles or QM), we also can use average velocity cross the channel.
		Velocities perpendicular will be so low that we can use a static calculation to distribute the charge.
		So I won't keep velocities from frame to frame. Less chance for funny errors.
		Charge redistribution uses the electric field and then places all the charge into the field sinks. And I steal the Deby Huckle equation to soften the distribution.
		This should still lead to some nice shaping from the electrodes.
		So the problem is that I could not find a good algorithm for the static solver. I is still iterative, it adds more code than the 2d vector code. Diffusion is just convolution anyways.
		Debye lenght is the radius where the electrical potential dropped by e (Euler) due do screening. We don't have screening because we have only electrons. 
		Electrodes also only have surface charge, but I don't simulate electron dynamic. Even my electric field is not globally computed,
		but at least I should adapt the stride of the EM field, calculate the surface charge needed per cell, redistribute all I have got. Then some staggering as with the field and the impedance of the wire.
		I think that I can calculate the impedance globally? Like sum up all the charge to keep the potential, this gives a current, this gives the new voltage, and iteration should converge.
	</p><p>
		The Velocity along the channel should stay dynamic because I want to see electrons bouncing around when one of the gates closes.
		<a href="https://en.wikipedia.org/wiki/Poisson%E2%80%93Boltzmann_equation">Poisson Boltzman has no closed solution</a>
		Without doping the charge will sit on the gate dielectric. For the large scale view of the CPU I need a solid line ( Blinken-Licht kompatible).
		So linewidth = electron density . One pixel anti-aliasing. The metal source also only emits on this surface. Funny halo charge carriers come later as does the wave-equation or temperature.
	</p>
		<h2>colors</h2>
		<p>To save colors I only display negative charge on the elctrodes. They are outside, the viewer has to read in the documentation that I (equivalently)
			added an arbitrary charge to the metal or don't show the doping of poly-Si electrodes. NAND to tetris shows how important NAND is and this is especially true for n-MOS. NAND has a simple, linear geometry.
			I really love CMOS, but I don't have colors for the other channel and the convoluted geometry makes it difficult for the eye.
		</p>
		<p>
			negative charge is blue. Negative potential is green. Should give a nice cyan signal. Red is insulator.
			Red depcits the bandgap, but not directly. The semiconductor needs to be black to show case Navier-Stokes.
			In the bulk of the semiconductor are circles of negative charge to prevent any drift to the other side ( I don't use finfets because of the confusing double contact).
			Only the shape distinguishes them from the free electron cloud.
			Between the metal electrodes (gates) I envision positve charged circles. In realitiy this would be doping, but I ran out of colors.
			I just pretend that these are also made out of metal and charged in a boot process or so.
			The circle disk form hints at their relation to the doping disks within the semiconductor.
			Maybe I can do away with these later. At least try to make them smaller. But what about the source? I want a positive (insulated gate) electrode as a symbol for the Ohmic contact.
			A transfer MOSFET would have these one both sides.
		</p>
		<p>
			Source emission is line-sat. Like cold metal (although our semiconductor has a temperatur). I need to match the amount ( the gradient ) to the self-space charge and the geometry (of my transistor).
			Basically, I deal with a dynamic system .. differential equations. I don't want oscilation or stutter. So binary emission is not good.
			Transistor seen as a gate: The more I open the gate, the more current flows (faster carriers, need more voltage for acceleration ) and the higher the voltage pulling at the metal.
		</p>
		<p>
			Friction with substrate and what happens when I switch a gate to negative? I probably get waves! Is it bad? Is diffusion good enough to dampen this?
			I don't have too many gates. Only probablem would be three gates where the outer ones capture the charge. I want to support 4 NAND in CMOS someday. I like totem poles.
			Friction with the substrate adds another parameter. So it comes later. The constraints on the boundary are not problem. Transversal speed is below one cell per tick.
			Longitudinal current may smash in the terminal electrodes, but is just absorbed there over the whole depth. Longitudinal velocity needs to stay below gate width.
			I don't get how people can live purely on a grid. My code started with forward projection of the grid cells. This way I can integrate over the potential created by the gates.
			As noted in videos, the distribution onto cells at the target leads to diffusion. The very reason we use NS instead of SchrÃ¶dinger is diffusion. Just keep this noisy diffusion small.
			Noisy is, like it varries on how we hit the grid. So I could use some compensation blurr (bi-cubic interpolation), but later. Hard to prove isotropy.
		</p>
		<p> Funny example would be compression of charge in a transfer gate. So have source/drain fully negative and the 5 gate fully positve. Then make the outer gates also negative.
			I guess that electrons will flow over the gates.</p>
		<p>
			It feels weird and is not very useful for example in a full adder, but pairs of two transistors is what is easy to draw. Y or + node purely made of semiconductors
			speak more of my hate about that I don't understand Ohmic contacts really. Or I should say, are more a thing for vacuum tubes. And then there it is really a matter of beams. TWT. CRT. Cyclotron.
		</p>
		<h2>Walk the line<h2>
			<p>
				Along a line there is not much Navier Stokes. Across the line there is a quasi static distribution derived from space charge and diffusion and the static potential.
				Poisson has an effect along the line, which will help with more density in the center of the wire I guess. Still quasi static.
				Viscosity is just so high that any variance across the wire is damped to zero. Free length along the wire is also as short as a pixel.
				So at each position along the wire there is only one density and one current.
			</p><p>
				Yeah, sad that we don't show the body diode.
				But I still want to show the fields around the electrodes and the fixed (ring) charge.
				This is interesting at the source and for the electron gun pull up transisor: Show how the drain field gets negative and how it stops the voltage at the correct level as hard as possible.
			</p>
			<p>
				The electric field simulation ends in a constant field between the electrodes. It probably looks pretty to have the rings in full 3d.
				I better avoid 2d nodes to allow me to stick to this simple simulation. You just has to belive me that metal can transfer the potential without and Schottky Diodes.
				Or should ground already be present around the rings? I have the space. So I can attach coax lines right to it.
				Without ground I would have unshielded wires and would need to triangulate all the space. Coax would start before a via .. kinda like the green tube in Super Mario  .
				Also I may want to wrap multiple bits into a word line .. looks like a via? Sure as hell I need smooth curves to guide the eye into these.
				Word high-ways are always straight.
			</p>
			<p>
			So we have charge on a line. They don't like each other so the pull to the borders. Diffusion, temperator and a gaussian potential (nuclei, core electrons) well fight these.
			In the end there should at least no dip in the center ( first and second derivative should be zero.).
			So charge cannot go anywhere else, so they spread along the wire.
			A field be electrodes on the side will push them around, or even deplete a part.
			The source is just so negative that it presses electrons into the wire.
			I guess I don't use real metal, where electrons are shielded so well. It is hard to get them into the semiconductor.
			Rather they just spawn in the semiconductor at a fixed rate if the field ( calculate as if the wire just extends through a hole of the source) pulls.
			The rate is fixed like a hot cathode in a tube.
			</p>
			<p>
				For n-mosFET to have a pulling fixed field I need doping. So ring with a fixed positive charge, before the electrons fall all the way to Vdd.
				Maybe this symbol is so clear and isolated that I don't need to worry about the color ?
				Such a ring would allow nodes. The electric field inside the ports into the node "room" avoid depletion.
				The node may deplete a little in the center, but we don't care if we only have 3 edges.
				With 4 edges it still works. Full adders want 4 edges.
				Inside the room we can have round corners. Charge will be pulled around by image charge in the screen.
				I wonder if Navier Stokes can simulate this for us?
				Play with the insulation thickness to even out charge density so that it looks good on a computer. So nodes are much larger than the electrode separation rings.
			</p>
			<p>NAND gate works great with a series of electrode. Very small space between them so that their field overlaps. Yeah, we want a perfect screen. I dunno, feedthroughs are feed throughs.
				So: Long electrodes, small distance to the Carbon-Nanotube, even smaller distance between electrodes ?? Lools ugly.
				So instead: fixed positive charge between the electrodes, which beats the image charge on the electrodes, and avoids carrier depletion between the electrodes.
				Full on-state should have an even charge distribution along the tube.
			</p>
			<p>MOSFET based full-Adders seem to connect more than two transistors in nodes. Considering my problem with the depletion already on a realistic carbon Carbon-Nanotube,
				it seems like I should better insert a drain and use metal wires.
				Evenn in a vacuum tube it is difficult to let beams forget their origin. Wire-or needs a wire (and an entrophy bath).
				I could imagine two bending magnets for a chickane ( S shaped ). This would shift cathod rays left or right into different channels.
				This can be used for AND and OR .
				Works even better in 2d. Full adder has 3 inputs. So both bending directions and multiple beams. Ah, we need bending before that to already shift the beam once. Analog add.
				So in reality current signals in coils overlap their magnetic field. Uh, current.
				I guess it could also work with electrodes? But it breaks symmetry.
				It is difficult to visualize the oposite charge on both plates.
				Also we need a grid anode to keep the outputs isolated (like color CRT). Or we even need multiple CRTs.
				I don't want half adders. Better have overful. So 4 bits. 2 deflection directions and in each bits add (haha) up their deflection.
				3 CRTs, where one only fires if all 4 bits are set. So maybe add 6 bits in a small angle tube.
				So this sound all great, but is very 2d and not useful .. especially not to visualize a CPU.
			</p>
			<p>
				Also this needs voltage stabilization for the high level. We can't let the anode in a CRT rise too high.
				Usually, the impact energy is used for light. But here?
			</p>
		<h2> verlet vs grid</h2>
		<p>
			So it seems that with Navie Stokes the internal state equation brings me back to kineamtic gas theory ( Verlet ).
			With charge on the carriers the equation becomes complicated ( doping level ) and I also need temperature.
			What if I yeah like in a beginner physics course do the epsilontic once again?
		</p>
		<p>
			For electostatic simulation I already use a grid. So for kinetic particles I can use it to.
			The grid position and velocity isn't even important then.
			For each cell I calculate the electrostatic forces apply them to velocity and apply velocity to the new location of this cell.
			In a timestep I map all nodes of a lattice onto a new regular grid. In case of crossing, I halve the time step.
			At each vertex I have an electron density. I (bi-)interpolate linearly over the faces.
			I mean, first I calculate the basis function which spreads the values at the vertex over the face for each vertex.
			Then I take the integral ( compact base ) to conserve the number of charge carriers and set the electron density.
			For the new grid I sum up the integrals of the basis functions which overlap with each cell.
			Those are all polynoms and thus integration is straight forward.
		</p>
		<p>
			A scrap that. Antialiasing may have some synergy with hardware implementations, but here we better pull using bi-cubic interpolation.
			To conserve the charges locally, the matrix for particle redistribution needs to have column sums of 1. Normalize!
			That is strange, bi-cubic pushing would give us the forward norm directly.
			Where is my time inversion symmetry gone? Do I need Antialiasing? I man, I could use stupid supersampling
			because a short calculation in my head gave polynoms of 9th degree or so. I'd rather use 4x4 subpixels.
			With real viscosity and pressure gradient, I could us linear interpolation and Antialiasing. And here I mean really linear, like on N64 by triangulateing the lattice.
			I think then I only get polygons up to order 3 like it is to expected in 3 dimensions ( height is weight ).
			Does this give me column and row norms no matter if I push or pull? No again it only gives row norms.
			Ah does not matter. The other way (in time) needs the inverse matrix, not the transpose.
			So bi-cubic pulling it is. Or bi-linear with grid staggering. Uh, a parameter. Staggering feels hard to debug: How draw to canvas, how to map to field and circuit layout?
		</p>
		<p>		
			This mapping relieves us from a lot of the Nabla operators for acceleration ( right hand side ).
			Linear interpolation is just so succesful generally. This approach has no new tuning paramters.
			Navier Stokes in 2d has a solution even without the grid, so maybe I need to go 3d to really apreciate it?
			Navier Stokes has a real viscosity term which should be isotropic ( proof ). Maybe in my application it is not important because I already decided to align all transistors to grid to give it a technical look.
			The wires on the other hand are 3d splines .. or really surfaces for the parallel connections ( ribbon cable ).
			I need cables because there is just no good 2d notation for crossing wires. Still most of the time the cables are pinnend to the board.
		</p>
		<p>
			Do I need gradient P when I use PV=nkT ? In this case gradient P is gradient n . Ah, I cannot just diffuse n. Gradient n influences velocity which in turn influences location.
			So collisions between gas particles is important here. I wonder why averaging over a cell has a different effect. Ah, averaging does not create large velocities.
			Yeah, so not a big deal. One more parameter ( particle weight ) to add gradient n to velocitie. I do Euler integration. No idea how this would look with Verlet.
			Velocity Verlet seems to use the most fresh values from Euler Integration. So location+=velocity and then calculate the electro static field there and use this new value to change acclereration.
			Then use the mean value of the new and old acceleration to update the velocity. I can use this. I have the equal sign, which in the solver becomes an assignment ( or += ) operator. I can average there.
			Shear viscosity is what we want. Laplace * velocity additionally gives us kinda compression velocity which is also to be expected from kinetic gas theory. It would only be strange for liquids.
			What is the third term in Navier Stokes for? I removes rotation because it does not creat friction forces.
			The velocity gradient in 2d is a 2x2 matrix. Is the rotation fully anti-symmetric ? [ [ a b] [-b a] ] ah yes. Ah, I see, in 3d it is not really a rotation matrix, but more its generator.
			So we take the symmetric part.
		</p>
		<p>
			Somehow I get that the 3 removes the Spur of the 3d stress matrix because symmetric expansion should not result in any forces.
			The 3 comes from equally splitting a correction offset to the diagonale to pin the Spur to 0. For 2d this would be 2 .
			With a 2x2 matrix we take the difference between the two values and then insert +1/2 and -1/2 . And now we have viscosity independent of our lattice.
		</p>
		<p>
			Verlet integration of gas needs Monte Carlo simulation which introduces noise, which does not look good and also finds its way into the electrostatic simulation. 
			Beam crossing looks ugly, but what if I do point to point electostatic interaction with high fidelity? Could lead to nice scattering.
			In real tubes the space charge prevents any meaningful density, but in my sciFy world I combine doping (for nice channels) with free particles.
			I could not come up with any sub poisson noise technique. On electron emission I could set the size of the packet to fix the current.
			But somehow I feel like this needs adjustment over the course of the flight.
			Like with optics and beamlets (Gaussain beams) instead of rays, each particle would have a size to avoid spots like in a histogram.
			There would be diffusion where on every step electrons flow from packet to packet or packet dislocate a little bit to smooth auth electron density.
			Overall this feels like too many tuning parameters. 
		</p>
		<p>	
			Instead I do semiconductor: electron density on a grid.
			I start with JS (TS really).
			I dunno, is the GL shader language readable for complex stuff?
		</p>
		<h2>1d case</h2>
		<p>Seems like JS timer, canvas, and canvas.drawImage() are low power consumption.
				
		</p>
		<canvas id="t_vertical" width="540" height="100" style="border:1px solid #000000;" class=""></canvas>    
		<h2>2d case</h2>
		<p>
isotropie:	flow with fixed velocity.
Impulse flow over the borders of the cells (because we chose to use a grid): velocity * impulse_density.

		</p>
		<p>
Newton axioms: Delta_P due to state across border leads to delta_impulse of the flow.
Also electric field * density leads to delta_impulse.
state: looks like Density determines Pressure (and via Poisson the electric field).
Circular path which we just follow iteratively. I don't really have a temperature, do I?
We already took into account the field across cells, but also need to look inside a cell.
State equeation!
With charge in 2d pressure is .. 2d is so difficult.
With more charge carriers, we get more electric field. So force = density ( n / cell ) .. ah per particle.
Pressure is per line. So pressure is = n^2 ? Funny not to consider collisions. Feels a bit wrong because with more electrons they are closer to each other and a shorter mean path and I guess P = n^4 .
Finite integral over 1/x (force in 2d) is 1/x^2 . Where can I integrate this? Ah, nope ,
the small x don't exist due to repulsion and the large don't due to cell size.
		</p>
	Check effect of state isotropie : circular waves .


	<div>
		<canvas id="t_animated" width="540" height="100" style="border:1px solid #000000;" class=""></canvas>    
		<button id="t_animate_"> button, weil es nur als Film funktioniert (CSS animation ? ) </button>
		</div>
	</body>
</html>