<html>
    <head>
        <title>6502 ISA converted to load-store</title>
        <style>
            table,th,td{
                border: 1px blue solid;
                border-collapse: collapse;
            }
        </style>
    </head>
    <body>
        <h2>registers</h2>
        <table>
            <thead>
                <tr>
                    <th>Lo</th><th>Hi</th><th>long</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>P</td><td>P</td><td>Programm counter</td></tr>
                <tr><td>B</td><td>C</td><td>Accumulator { Buffer:Counter } </td></tr>
                <tr><td>X</td><td>X</td><td>IndeX</td></tr>
                <tr><td>Y</td><td>Y</td><td>another Index</td></tr>
                <tr><td>S</td><td>S</td><td>Stack Pointer</td></tr>
                <tr><td>F</td><td></td><td>Status Flags: ZNCVID  (oVerflow)</td></tr>
            </tbody>
        </table>

        <h1>Instruction encoding</h1>
        Instructions with two source registers use each bit to select between two possible source for each input of the ALU.  Default accessible register (general purpose) are BCXY.
        Abbreviations: Immediate. Cnd=Condition. Function "Lambda" L. D is direction, 0: towards GeneralPuroposeReg, towards Flags, towards Registers (first wins)
        <table>
            <thead>
                <tr>
                    <th>OP Code</th><th>Function (SubOp)</th><th>source Register(s)</th><th>Direction</th><th>Target Register</th><th>Immediate</th><th>Explaination</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>1</td><td>LLL&lt;110</td><td>R={B C} R={X Y}</td><td></td><td>TT</td><td></td><td>Register, Register => (Register) Operation. 8:16 bit limitation is motivated by relative addressing</td></tr>
                <tr><td>1110</td><td></td><td>RR</td><td></td><td>LL</td><td></td><td>CMP, BIT , low byte only .. </td></tr>
                <tr><td>1111</td><td></td><td>L</td><td>D</td><td>TT</td><td></td><td>Rotation through carry in Direction, AS</td></tr>
                <tr><td>01</td><td>LL</td><td>R</td><td>D</td><td>T</td><td>0</td><td>Pointer Operation. R={X,Y}, T={B,BC}  </td></tr>
                <tr><td>01</td><td>LL</td><td>R</td><td>D</td><td>T</td><td>1</td><td>Index Operation</td></tr>
                <tr><td>001</td><td></td><td></td><td>RR</td><td>TT</td><td>0</td><td>Copy to register</td></tr>
                <tr><td>001</td><td></td><td></td><td>LL</td><td>TT</td><td>1</td><td>immediate value</td></tr>
                <tr><td>0001</td><td></td><td></td><td>D=1</td><td>FF</td><td>V</td><td>Set Flag FF={CVDI} to Value</td></tr>
                <tr><td>0001</td><td></td><td></td><td>D=0</td><td>FF</td><td>V</td><td>Get Flag aka If FFlag==Voume? Branch!</td></tr>
                <tr><td>0000</td><td></td><td></td><td>D</td><td>PS</td><td>I</td><td>See next table</td></tr>
            </tbody>
        </table>
        <h2> trying to unify S with X and Y</h2>
        <table>
            <thead>
                <tr>
                    <th>OP Code</th><th>Function (SubOp)</th><th>source Register(s)</th><th>Direction</th><th>Function2</th><th>Target Register</th><th>Explaination</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>1</td><td>LLL&lt;110</td><td>R={B C} R={X Y}</td><td></td><td>TT</td><td></td><td>Register, Register => (Register) Operation. 8:16 bit limitation is motivated by relative addressing</td></tr>
                <tr><td>1010     </td><td></td><td></td> <td></td><td>LL=++ -- not neg</td> <td>TT</td><td>Typical in place operations. +=2 and -=2 maybe also</td></tr>
                <tr><td>1000</td><td></td><td></td><td>D</td><td>L</td><td>TT</td><td>Rotation through carry in Direction, Arithmetic Shift</td></tr>

                <tr><td>0111</td><td></td><td>R={B C} R={X Y}</td><td></td><td>LL</td><td></td><td>CMP, BIT , low byte only ... Uh, no 9bit sprite collision for C64? </td></tr>
                <tr style="border-bottom: 2px solid black;">    </tr><td>0110</td><td> </td><td>RR   </td><td></td><td></td><td>TT</td><td>Copy to register (RR==TT?immediate) </td></tr>
                

                
                <tr><td>0101=Immediate   </td> <td></td> <td></td><td></td> <td>LLL</td> <td>T=B,Y</td> <td>L like Opcode 1 & CMP & BIT</td></tr>
                <tr><td>0100=Displacement</td> <td></td><td>R=X,Y</td> <td>D</td><td>8bit|16bit displacement</td> <td>T=B|other index</td><td></td></tr>
                <tr><td>0011=Stream      </td> <td></td><td>R=X,Y</td> <td>D</td><td>++ --</td> <td>T=B|other index</td><td></td></tr>
                <tr><td>0010=Stack       </td> <td></td><td>R=S  </td> <td>D</td><td>++ --</td> <td>TT={B,X,PStatus,PCounter}</td><td> wrong combination of D and ++ --  changes  JSR to BRK and RTS to RTI </td></tr>
                <tr><td>0001=Absolute    </td> <td></td> <td>8bit|16bit address</td>  <td>D</td><td></td><td>TT = B C X </td></tr>
                <tr><td>0001=Absolute    </td> <td></td><td>8bit|16bit address</td><td>Indirect?</td><td></td> <td>TT = PC</td><td>JMP</td></tr>
                
                <tr style="border-top: 2px solid black;"><td>0000</td><td></td><td></td><td>D=1</td><td>FF</td><td>V</td><td>Set Flag FF={CVDI} to Value</td></tr>
                <tr><td>0000</td><td></td><td></td><td>D=0</td><td>FF</td><td>V</td><td>Get Flag aka If FFlag==Value? Branch!</td></tr>
            </tbody>

        </table>     
        
        <h3>Details about stack based Instructions: Wrong combination of ++ and D is reversed and second function activated</h3>
        <table>
            <thead>
                <tr>
                    <th>Original function</th><th>reversed</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <tr><td>JSR</td><td>BRK</td></tr>
                    <tr><td>RTS</td><td>RTI</td></tr>
                    <tr><td>PHX</td><td>TXS</td></tr>
                    <tr><td>PLX</td><td>TSX</td></tr>                    
                </tr>
            </tbody>
        </table> 

        <h3> trying to unify S with X and Y (old version)</h3>
        <table>
            <thead>
                <tr>
                    <th>OP Code</th><th>Function (SubOp)</th><th>source Register(s)</th><th>Direction</th><th>Target Register</th><th>Immediate</th><th>Explaination</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>1</td><td>LLL&lt;110</td><td>R={B C} R={X Y}</td><td></td><td>TT</td><td></td><td>Register, Register => (Register) Operation. 8:16 bit limitation is motivated by relative addressing</td></tr>
                <tr ><td>1110</td><td></td><td>RR</td><td></td><td>LL</td><td></td><td>CMP, BIT , low byte only .. </td></tr>
                <tr style="border-bottom: 2px solid black;"><td>1111</td><td></td><td>L</td><td>D</td><td>TT</td><td></td><td>Rotation through carry in Direction, AS</td></tr>
                <tr><td>0</td><td>LL=010..100 </td><td>R=X,Y</td><td>D</td><td>T</td><td></td><td>Pointer Operation, reverse stack. R={X,Y}, T={B,BC}. {LL=010 & T=1 ? TSX }  </td></tr>
                <tr><td>0</td><td>LL={101=BRK-RTI,110=JSR-RTS} for progamm counter, LL={R=S instead of Y} for B</td><td>R=Y,S  </td><td>D</td><td>T</td><td></td><td>Pointer Operation. stack , T={B ,Processor status,Program-Counter}  </td></tr>
                <tr><td>0</td><td>LL=111A </td><td>R=X,Y   </td><td>D</td><td>T</td><td></td><td>Index Operation with immediate / Addressing mode {I16, I16+Y8, X16+I8, Y16+I8</td></tr>

                <tr style="border-top: 2px solid black;" ><td>0001</td><td> </td><td>RR   </td><td></td><td>TT</td><td></td><td>Copy to register (RR==TT?immediate) </td></tr>
                <tr><td>0000</td><td></td><td></td><td>D=1</td><td>FF</td><td>V</td><td>Set Flag FF={CVDI} to Value</td></tr>
                <tr><td>0000</td><td></td><td></td><td>D=0</td><td>FF</td><td>V</td><td>Get Flag aka If FFlag==Voume? Branch!</td></tr>
            </tbody>

        </table>      
        Okay, I can see why MIPS did away with the stack. So I could -- like 6502 and MIPS -- have DEX extra and JumpAndLink via register.
        Even with inner loops, immediate is just too nice to not have all reg-reg also with immediate.
        That would mean as many immediate as reg reg because the format is the same ( reg reg as two separate input groups).  
        <h3>Details</h3>
        <table>
            <thead>
                <tr>
                    <th>P involved</th><th>Stack Involved</th><th>Direction (to GP:0)</th><th>Immediate</th><th>Explanation</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>0</td><td>0</td><td>0</td><td>0</td><td>TSX</td></tr>
                <tr><td>0</td><td>0</td><td>1</td><td>0</td><td>TXS</td></tr>
                <tr><td>0</td><td>1</td><td>0</td><td>0</td><td>PLP</td></tr>
                <tr><td>0</td><td>1</td><td>1</td><td>0</td><td>PHP</td></tr>

                <tr><td>1</td><td>0</td><td>0</td><td>0</td><td>NOP (where else?)</td></tr>
                <tr><td>1</td><td>0</td><td>1</td><td>0</td><td>RTS (shifted from below)</td></tr>
                <tr><td>1</td><td>1</td><td>0</td><td>0</td><td>RTI,(Flags are GP, so this is more specific) </td></tr>
                <tr><td>1</td><td>1</td><td>1</td><td>0</td><td>BRK (where else?)</td></tr>

                <tr><td>1</td><td>0</td><td>0</td><td>1</td><td>JMP</td></tr>
                <tr><td>1</td><td>0</td><td>1</td><td>1</td><td></td></tr>
                <tr><td>1</td><td>1</td><td>0</td><td>1</td><td>JSR </td></tr>
                <tr><td>1</td><td>1</td><td>1</td><td>1</td><td></td></tr>

                <tr><td>0</td><td>0</td><td>0</td><td>1</td><td></td></tr>
                <tr><td>0</td><td>0</td><td>1</td><td>1</td><td></td></tr>
                <tr><td>0</td><td>1</td><td>0</td><td>1</td><td>?PHA</td></tr>
                <tr><td>0</td><td>1</td><td>1</td><td>1</td><td>?PLA</td></tr>

            </tbody>
        </table>        
        <h3>8 Register-Register Functions</h3>
        ADC, SBC, SBC with operands swapped, CMP == 111.
        BIT==110, AND, OR, EOR.
        <h3> Pointer </h3>
        <table>
            <thead>
                <tr>
                    <th>LL</th><th>Explanation</th>
                </tr>
            </thead>
            <tbody>
                <tr><td> 00 </td><td> plain </td></tr>
                <tr><td> 01 </td><td> ++/-- only, no actual data access (T is not used, Direction is used )</td></tr>
                <tr><td> 10 </td><td> ++/-- </td></tr>
                <tr><td> 11 </td><td> ++/-- X becomes S for PHA and PLA, while Y Stack becomes reversed for memcopy</td></tr>
            </tbody>
        </table>

        <h3>Index</h3>
        <table>
            <thead>
                <tr>
                    <th>LL</th><th>Addressing mode</th>
                </tr>
            </thead>
            <tbody>
                <tr><td> 00 </td><td> I16 </td></tr>
                <tr><td> 01 </td><td> I16 + RL  ( register Lo byte ) </td></tr>
                <tr><td> 10 </td><td> I16 + RH </td></tr>
                <tr><td> 11 </td><td> I8 + R  ( or better: R + I8)</td></tr>
            </tbody>
        </table>        

        <h3> Copy to register</h3>
        <table>
            <thead>
                <tr>
                    <th>RR==TT</th><th>Function</th>
                </tr>
            </thead>
            <tbody>
                <tr><td> 00=B </td><td> NOT </td></tr>
                <tr><td> 01=C </td><td> DEC </td></tr>
                <tr><td> 10=X </td><td> NOT </td></tr>
                <tr><td> 11=Y </td><td> NEG </td></tr>
            </tbody>
        </table>        

        <h3> Immediate Value</h3>
        <table>
            <thead>
                <tr>
                    <th>LL</th><th>Function</th>
                </tr>
            </thead>
            <tbody>
                <tr><td> 00 </td><td> Load </td></tr>
                <tr><td> 01 </td><td> ADC </td></tr>
                <tr><td> 10 </td><td> AND </td></tr>
                <tr><td> 11 </td><td> BIT for B and CMP for C </td></tr>
            </tbody>
        </table>

        <h3> 8 Branch Conditions from 6502</h3>
        <p style="white-space: pre-wrap;">
        = &lt;&gt;
        &gt;= &lt;
        C NC
        V NV
        </p>

        <h2>not ISA, but µ-Architecture taken from 8510</h2>
        <table>
            <thead>
                <tr>
                    <th>Lo</th><th>Hi</th><th>long</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>A</td><td>A</td><td>Address Register</td></tr>
                <tr><td>DI</td><td></td><td>Data in</td></tr>
                <tr><td>DO</td><td></td><td>Data out with Tristate buffer</td></tr>
                <tr><td>PD</td><td></td><td>Pre-decode register</td></tr>
                <tr><td>I</td><td></td><td>Instruction register</td></tr>
                <tr><td>Q</td><td>Q</td><td>Programm counter WriteBack</td></tr>
                <tr><td>W</td><td>W</td><td>ALU WriteBack</td>
                <tr><td>M</td><td></td><td>Micro-Code instruction counter (per cycle, each cycle has 4 (or 8?) phases)</td></tr>
            </tbody>
        </table>
<p>
        The Lo ALU has to inputs connected to XL, B , P  and YL, C, D, S. It has Carry look ahead. AND, OR, EOR, ROR is implemented per bit with some circuitry just as in 8080.

    The high ALU can only do ++ and -- . It uses inverters on odd and even bits and has a flat carry with alternated inverted bits. Inputs are: S,X,Y,P

</p>
<a href="ISA16.htm">16 bit words</a>
    </body>
</html>